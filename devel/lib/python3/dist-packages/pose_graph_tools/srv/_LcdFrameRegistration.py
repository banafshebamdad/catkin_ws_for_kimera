# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pose_graph_tools/LcdFrameRegistrationRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LcdFrameRegistrationRequest(genpy.Message):
  _md5sum = "c70b0c2140c92a1e48918c9a269225fc"
  _type = "pose_graph_tools/LcdFrameRegistrationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 query_robot
uint64 match_robot
uint64 query
uint64 match
"""
  __slots__ = ['query_robot','match_robot','query','match']
  _slot_types = ['uint64','uint64','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       query_robot,match_robot,query,match

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LcdFrameRegistrationRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.query_robot is None:
        self.query_robot = 0
      if self.match_robot is None:
        self.match_robot = 0
      if self.query is None:
        self.query = 0
      if self.match is None:
        self.match = 0
    else:
      self.query_robot = 0
      self.match_robot = 0
      self.query = 0
      self.match = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4Q().pack(_x.query_robot, _x.match_robot, _x.query, _x.match))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.query_robot, _x.match_robot, _x.query, _x.match,) = _get_struct_4Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4Q().pack(_x.query_robot, _x.match_robot, _x.query, _x.match))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.query_robot, _x.match_robot, _x.query, _x.match,) = _get_struct_4Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4Q = None
def _get_struct_4Q():
    global _struct_4Q
    if _struct_4Q is None:
        _struct_4Q = struct.Struct("<4Q")
    return _struct_4Q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pose_graph_tools/LcdFrameRegistrationResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LcdFrameRegistrationResponse(genpy.Message):
  _md5sum = "c544cb47163024a80f51b3b120d56c3a"
  _type = "pose_graph_tools/LcdFrameRegistrationResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool valid
geometry_msgs/Pose match_T_query


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['valid','match_T_query']
  _slot_types = ['bool','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid,match_T_query

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LcdFrameRegistrationResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid is None:
        self.valid = False
      if self.match_T_query is None:
        self.match_T_query = geometry_msgs.msg.Pose()
    else:
      self.valid = False
      self.match_T_query = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7d().pack(_x.valid, _x.match_T_query.position.x, _x.match_T_query.position.y, _x.match_T_query.position.z, _x.match_T_query.orientation.x, _x.match_T_query.orientation.y, _x.match_T_query.orientation.z, _x.match_T_query.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.match_T_query is None:
        self.match_T_query = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.valid, _x.match_T_query.position.x, _x.match_T_query.position.y, _x.match_T_query.position.z, _x.match_T_query.orientation.x, _x.match_T_query.orientation.y, _x.match_T_query.orientation.z, _x.match_T_query.orientation.w,) = _get_struct_B7d().unpack(str[start:end])
      self.valid = bool(self.valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7d().pack(_x.valid, _x.match_T_query.position.x, _x.match_T_query.position.y, _x.match_T_query.position.z, _x.match_T_query.orientation.x, _x.match_T_query.orientation.y, _x.match_T_query.orientation.z, _x.match_T_query.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.match_T_query is None:
        self.match_T_query = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.valid, _x.match_T_query.position.x, _x.match_T_query.position.y, _x.match_T_query.position.z, _x.match_T_query.orientation.x, _x.match_T_query.orientation.y, _x.match_T_query.orientation.z, _x.match_T_query.orientation.w,) = _get_struct_B7d().unpack(str[start:end])
      self.valid = bool(self.valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B7d = None
def _get_struct_B7d():
    global _struct_B7d
    if _struct_B7d is None:
        _struct_B7d = struct.Struct("<B7d")
    return _struct_B7d
class LcdFrameRegistration(object):
  _type          = 'pose_graph_tools/LcdFrameRegistration'
  _md5sum = '35f0b877789b9625f9ce0e88684ba2e8'
  _request_class  = LcdFrameRegistrationRequest
  _response_class = LcdFrameRegistrationResponse
