// Generated by gencpp from file pose_graph_tools/LoopClosuresAck.msg
// DO NOT EDIT!


#ifndef POSE_GRAPH_TOOLS_MESSAGE_LOOPCLOSURESACK_H
#define POSE_GRAPH_TOOLS_MESSAGE_LOOPCLOSURESACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pose_graph_tools
{
template <class ContainerAllocator>
struct LoopClosuresAck_
{
  typedef LoopClosuresAck_<ContainerAllocator> Type;

  LoopClosuresAck_()
    : publishing_robot_id(0)
    , destination_robot_id(0)
    , robot_src()
    , frame_src()
    , robot_dst()
    , frame_dst()  {
    }
  LoopClosuresAck_(const ContainerAllocator& _alloc)
    : publishing_robot_id(0)
    , destination_robot_id(0)
    , robot_src(_alloc)
    , frame_src(_alloc)
    , robot_dst(_alloc)
    , frame_dst(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _publishing_robot_id_type;
  _publishing_robot_id_type publishing_robot_id;

   typedef uint16_t _destination_robot_id_type;
  _destination_robot_id_type destination_robot_id;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _robot_src_type;
  _robot_src_type robot_src;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _frame_src_type;
  _frame_src_type frame_src;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _robot_dst_type;
  _robot_dst_type robot_dst;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _frame_dst_type;
  _frame_dst_type frame_dst;





  typedef boost::shared_ptr< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> const> ConstPtr;

}; // struct LoopClosuresAck_

typedef ::pose_graph_tools::LoopClosuresAck_<std::allocator<void> > LoopClosuresAck;

typedef boost::shared_ptr< ::pose_graph_tools::LoopClosuresAck > LoopClosuresAckPtr;
typedef boost::shared_ptr< ::pose_graph_tools::LoopClosuresAck const> LoopClosuresAckConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator1> & lhs, const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator2> & rhs)
{
  return lhs.publishing_robot_id == rhs.publishing_robot_id &&
    lhs.destination_robot_id == rhs.destination_robot_id &&
    lhs.robot_src == rhs.robot_src &&
    lhs.frame_src == rhs.frame_src &&
    lhs.robot_dst == rhs.robot_dst &&
    lhs.frame_dst == rhs.frame_dst;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator1> & lhs, const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_graph_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9c7cfa8a3ce5c724d171d7076a7f930";
  }

  static const char* value(const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9c7cfa8a3ce5c72ULL;
  static const uint64_t static_value2 = 0x4d171d7076a7f930ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_graph_tools/LoopClosuresAck";
  }

  static const char* value(const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 publishing_robot_id\n"
"uint16 destination_robot_id\n"
"uint32[] robot_src\n"
"uint32[] frame_src\n"
"uint32[] robot_dst\n"
"uint32[] frame_dst\n"
;
  }

  static const char* value(const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.publishing_robot_id);
      stream.next(m.destination_robot_id);
      stream.next(m.robot_src);
      stream.next(m.frame_src);
      stream.next(m.robot_dst);
      stream.next(m.frame_dst);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoopClosuresAck_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_graph_tools::LoopClosuresAck_<ContainerAllocator>& v)
  {
    s << indent << "publishing_robot_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.publishing_robot_id);
    s << indent << "destination_robot_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.destination_robot_id);
    s << indent << "robot_src[]" << std::endl;
    for (size_t i = 0; i < v.robot_src.size(); ++i)
    {
      s << indent << "  robot_src[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.robot_src[i]);
    }
    s << indent << "frame_src[]" << std::endl;
    for (size_t i = 0; i < v.frame_src.size(); ++i)
    {
      s << indent << "  frame_src[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.frame_src[i]);
    }
    s << indent << "robot_dst[]" << std::endl;
    for (size_t i = 0; i < v.robot_dst.size(); ++i)
    {
      s << indent << "  robot_dst[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.robot_dst[i]);
    }
    s << indent << "frame_dst[]" << std::endl;
    for (size_t i = 0; i < v.frame_dst.size(); ++i)
    {
      s << indent << "  frame_dst[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.frame_dst[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_GRAPH_TOOLS_MESSAGE_LOOPCLOSURESACK_H
