// Generated by gencpp from file pose_graph_tools/PoseGraphQueryResponse.msg
// DO NOT EDIT!


#ifndef POSE_GRAPH_TOOLS_MESSAGE_POSEGRAPHQUERYRESPONSE_H
#define POSE_GRAPH_TOOLS_MESSAGE_POSEGRAPHQUERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pose_graph_tools/PoseGraph.h>

namespace pose_graph_tools
{
template <class ContainerAllocator>
struct PoseGraphQueryResponse_
{
  typedef PoseGraphQueryResponse_<ContainerAllocator> Type;

  PoseGraphQueryResponse_()
    : pose_graph()  {
    }
  PoseGraphQueryResponse_(const ContainerAllocator& _alloc)
    : pose_graph(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pose_graph_tools::PoseGraph_<ContainerAllocator>  _pose_graph_type;
  _pose_graph_type pose_graph;





  typedef boost::shared_ptr< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PoseGraphQueryResponse_

typedef ::pose_graph_tools::PoseGraphQueryResponse_<std::allocator<void> > PoseGraphQueryResponse;

typedef boost::shared_ptr< ::pose_graph_tools::PoseGraphQueryResponse > PoseGraphQueryResponsePtr;
typedef boost::shared_ptr< ::pose_graph_tools::PoseGraphQueryResponse const> PoseGraphQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator1> & lhs, const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pose_graph == rhs.pose_graph;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator1> & lhs, const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_graph_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c232646d10e49131de5460199de2ac55";
  }

  static const char* value(const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc232646d10e49131ULL;
  static const uint64_t static_value2 = 0xde5460199de2ac55ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_graph_tools/PoseGraphQueryResponse";
  }

  static const char* value(const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_graph_tools/PoseGraph pose_graph\n"
"\n"
"================================================================================\n"
"MSG: pose_graph_tools/PoseGraph\n"
"Header header\n"
"\n"
"# Nodes and edges\n"
"PoseGraphNode[] nodes\n"
"PoseGraphEdge[] edges\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pose_graph_tools/PoseGraphNode\n"
"Header header\n"
"\n"
"int32 robot_id\n"
"\n"
"uint64 key\n"
"\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: pose_graph_tools/PoseGraphEdge\n"
"Header header\n"
"\n"
"uint64 key_from\n"
"uint64 key_to\n"
"\n"
"int32 robot_from\n"
"int32 robot_to\n"
"\n"
"int32 type\n"
"\n"
"# Type enums\n"
"int32 ODOM      = 0\n"
"int32 LOOPCLOSE = 1\n"
"int32 LANDMARK  = 2\n"
"int32 REJECTED_LOOPCLOSE = 3\n"
"int32 MESH = 4\n"
"int32 POSE_MESH = 5\n"
"int32 MESH_POSE = 6\n"
"\n"
"# Transforms in ede\n"
"geometry_msgs/Pose pose\n"
"float64[36] covariance\n"
;
  }

  static const char* value(const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_graph);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseGraphQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_graph_tools::PoseGraphQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose_graph: ";
    s << std::endl;
    Printer< ::pose_graph_tools::PoseGraph_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_graph);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_GRAPH_TOOLS_MESSAGE_POSEGRAPHQUERYRESPONSE_H
