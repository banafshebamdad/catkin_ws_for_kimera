// Generated by gencpp from file pose_graph_tools/VLCFrameQueryRequest.msg
// DO NOT EDIT!


#ifndef POSE_GRAPH_TOOLS_MESSAGE_VLCFRAMEQUERYREQUEST_H
#define POSE_GRAPH_TOOLS_MESSAGE_VLCFRAMEQUERYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pose_graph_tools
{
template <class ContainerAllocator>
struct VLCFrameQueryRequest_
{
  typedef VLCFrameQueryRequest_<ContainerAllocator> Type;

  VLCFrameQueryRequest_()
    : robot_id(0)
    , pose_ids()  {
    }
  VLCFrameQueryRequest_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , pose_ids(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _pose_ids_type;
  _pose_ids_type pose_ids;





  typedef boost::shared_ptr< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct VLCFrameQueryRequest_

typedef ::pose_graph_tools::VLCFrameQueryRequest_<std::allocator<void> > VLCFrameQueryRequest;

typedef boost::shared_ptr< ::pose_graph_tools::VLCFrameQueryRequest > VLCFrameQueryRequestPtr;
typedef boost::shared_ptr< ::pose_graph_tools::VLCFrameQueryRequest const> VLCFrameQueryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator1> & lhs, const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.pose_ids == rhs.pose_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator1> & lhs, const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_graph_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53b8b74cf9d6c3e714f479044e27576c";
  }

  static const char* value(const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53b8b74cf9d6c3e7ULL;
  static const uint64_t static_value2 = 0x14f479044e27576cULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_graph_tools/VLCFrameQueryRequest";
  }

  static const char* value(const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 robot_id\n"
"uint32[] pose_ids\n"
;
  }

  static const char* value(const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.pose_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VLCFrameQueryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_graph_tools::VLCFrameQueryRequest_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "pose_ids[]" << std::endl;
    for (size_t i = 0; i < v.pose_ids.size(); ++i)
    {
      s << indent << "  pose_ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.pose_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_GRAPH_TOOLS_MESSAGE_VLCFRAMEQUERYREQUEST_H
