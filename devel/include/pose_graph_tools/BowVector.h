// Generated by gencpp from file pose_graph_tools/BowVector.msg
// DO NOT EDIT!


#ifndef POSE_GRAPH_TOOLS_MESSAGE_BOWVECTOR_H
#define POSE_GRAPH_TOOLS_MESSAGE_BOWVECTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pose_graph_tools
{
template <class ContainerAllocator>
struct BowVector_
{
  typedef BowVector_<ContainerAllocator> Type;

  BowVector_()
    : word_ids()
    , word_values()  {
    }
  BowVector_(const ContainerAllocator& _alloc)
    : word_ids(_alloc)
    , word_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _word_ids_type;
  _word_ids_type word_ids;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _word_values_type;
  _word_values_type word_values;





  typedef boost::shared_ptr< ::pose_graph_tools::BowVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_graph_tools::BowVector_<ContainerAllocator> const> ConstPtr;

}; // struct BowVector_

typedef ::pose_graph_tools::BowVector_<std::allocator<void> > BowVector;

typedef boost::shared_ptr< ::pose_graph_tools::BowVector > BowVectorPtr;
typedef boost::shared_ptr< ::pose_graph_tools::BowVector const> BowVectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_graph_tools::BowVector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_graph_tools::BowVector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pose_graph_tools::BowVector_<ContainerAllocator1> & lhs, const ::pose_graph_tools::BowVector_<ContainerAllocator2> & rhs)
{
  return lhs.word_ids == rhs.word_ids &&
    lhs.word_values == rhs.word_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pose_graph_tools::BowVector_<ContainerAllocator1> & lhs, const ::pose_graph_tools::BowVector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pose_graph_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::BowVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_graph_tools::BowVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::BowVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_graph_tools::BowVector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::BowVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_graph_tools::BowVector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_graph_tools::BowVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1902706b4fdbaef5678c8f0eeda681c4";
  }

  static const char* value(const ::pose_graph_tools::BowVector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1902706b4fdbaef5ULL;
  static const uint64_t static_value2 = 0x678c8f0eeda681c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_graph_tools::BowVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_graph_tools/BowVector";
  }

  static const char* value(const ::pose_graph_tools::BowVector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_graph_tools::BowVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32[] word_ids\n"
"float32[] word_values\n"
;
  }

  static const char* value(const ::pose_graph_tools::BowVector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_graph_tools::BowVector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.word_ids);
      stream.next(m.word_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BowVector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_graph_tools::BowVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_graph_tools::BowVector_<ContainerAllocator>& v)
  {
    s << indent << "word_ids[]" << std::endl;
    for (size_t i = 0; i < v.word_ids.size(); ++i)
    {
      s << indent << "  word_ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.word_ids[i]);
    }
    s << indent << "word_values[]" << std::endl;
    for (size_t i = 0; i < v.word_values.size(); ++i)
    {
      s << indent << "  word_values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.word_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_GRAPH_TOOLS_MESSAGE_BOWVECTOR_H
